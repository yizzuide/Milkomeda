CREATE SEQUENCE ES_AGGREGATE_ID_SEQ
    INCREMENT 1
    MINVALUE 1
    START 1
    CACHE 100
    NO CYCLE;

CREATE TABLE IF NOT EXISTS ES_AGGREGATE (
                                            ID              BIGINT  PRIMARY KEY DEFAULT NEXTVAL('ES_AGGREGATE_ID_SEQ'),
                                            VERSION         INTEGER  NOT NULL,
                                            AGGREGATE_TYPE  TEXT     NOT NULL,
                                            CREATED_AT timestamp without time zone DEFAULT LOCALTIMESTAMP
) PARTITION BY HASH (ID);

CREATE INDEX IF NOT EXISTS IDX_ES_AGGREGATE_AGGREGATE_TYPE ON ES_AGGREGATE (AGGREGATE_TYPE);
CREATE TABLE ES_AGGREGATE_0 PARTITION OF ES_AGGREGATE
    FOR VALUES WITH (MODULUS 6, REMAINDER 0);
CREATE TABLE ES_AGGREGATE_1 PARTITION OF ES_AGGREGATE
    FOR VALUES WITH (MODULUS 6, REMAINDER 1);
CREATE TABLE ES_AGGREGATE_2 PARTITION OF ES_AGGREGATE
    FOR VALUES WITH (MODULUS 6, REMAINDER 2);
CREATE TABLE ES_AGGREGATE_3 PARTITION OF ES_AGGREGATE
    FOR VALUES WITH (MODULUS 6, REMAINDER 3);
CREATE TABLE ES_AGGREGATE_4 PARTITION OF ES_AGGREGATE
    FOR VALUES WITH (MODULUS 6, REMAINDER 4);
CREATE TABLE ES_AGGREGATE_5 PARTITION OF ES_AGGREGATE
    FOR VALUES WITH (MODULUS 6, REMAINDER 5);


CREATE SEQUENCE ES_EVENT_ID_SEQ
    INCREMENT 1
    MINVALUE 1
    START 1
    CACHE 100
    NO CYCLE;

CREATE TABLE IF NOT EXISTS ES_EVENT (
                                        ID              BIGINT     DEFAULT NEXTVAL('ES_EVENT_ID_SEQ'),
                                        TRANSACTION_ID  XID8       NOT NULL,
                                        AGGREGATE_ID    BIGINT     NOT NULL,
                                        VERSION         INTEGER    NOT NULL,
                                        AGGREGATE_TYPE  TEXT       NOT NULL,
                                        EVENT_TYPE      TEXT       NOT NULL,
                                        JSON_DATA       JSON       NOT NULL,
                                        CREATED_AT timestamp without time zone DEFAULT LOCALTIMESTAMP,
                                        PRIMARY KEY (ID, AGGREGATE_ID),
                                        UNIQUE (AGGREGATE_ID, VERSION)
) PARTITION BY HASH (AGGREGATE_ID);

CREATE INDEX IF NOT EXISTS IDX_ES_EVENT_AGGREGATE_TYPE_TRANSACTION_ID_ID ON ES_EVENT (AGGREGATE_TYPE, TRANSACTION_ID, ID);
CREATE INDEX IF NOT EXISTS IDX_ES_EVENT_AGGREGATE_ID ON ES_EVENT (AGGREGATE_ID);
CREATE INDEX IF NOT EXISTS IDX_ES_EVENT_VERSION ON ES_EVENT (VERSION);
CREATE INDEX IF NOT EXISTS IDX_ES_EVENT_AGGREGATE_TYPE ON ES_EVENT (AGGREGATE_TYPE);

CREATE TABLE ES_EVENT_0 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 0);
CREATE TABLE ES_EVENT_1 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 1);
CREATE TABLE ES_EVENT_2 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 2);
CREATE TABLE ES_EVENT_3 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 3);
CREATE TABLE ES_EVENT_4 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 4);
CREATE TABLE ES_EVENT_5 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 5);
CREATE TABLE ES_EVENT_6 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 6);
CREATE TABLE ES_EVENT_7 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 7);
CREATE TABLE ES_EVENT_8 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 8);
CREATE TABLE ES_EVENT_9 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 9);
CREATE TABLE ES_EVENT_10 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 10);
CREATE TABLE ES_EVENT_11 PARTITION OF ES_EVENT
    FOR VALUES WITH (MODULUS 12, REMAINDER 11);



CREATE TABLE IF NOT EXISTS ES_AGGREGATE_SNAPSHOT (
                                                     AGGREGATE_ID  BIGINT,
                                                     VERSION       INTEGER  NOT NULL,
                                                     AGGREGATE_TYPE  TEXT   NOT NULL,
                                                     JSON_DATA     JSON     NOT NULL,
                                                     CREATED_AT timestamp without time zone DEFAULT LOCALTIMESTAMP,
                                                     PRIMARY KEY (AGGREGATE_ID, VERSION)
) PARTITION BY HASH (AGGREGATE_ID);

CREATE INDEX IF NOT EXISTS IDX_ES_AGGREGATE_SNAPSHOT_AGGREGATE_ID ON ES_AGGREGATE_SNAPSHOT (AGGREGATE_ID);
CREATE INDEX IF NOT EXISTS IDX_ES_AGGREGATE_SNAPSHOT_VERSION ON ES_AGGREGATE_SNAPSHOT (VERSION);

CREATE TABLE ES_AGGREGATE_SNAPSHOT_0 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 0);
CREATE TABLE ES_AGGREGATE_SNAPSHOT_1 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 1);
CREATE TABLE ES_AGGREGATE_SNAPSHOT_2 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 2);
CREATE TABLE ES_AGGREGATE_SNAPSHOT_3 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 3);
CREATE TABLE ES_AGGREGATE_SNAPSHOT_4 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 4);
CREATE TABLE ES_AGGREGATE_SNAPSHOT_5 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 5);
CREATE TABLE ES_AGGREGATE_SNAPSHOT_6 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 6);
CREATE TABLE ES_AGGREGATE_SNAPSHOT_7 PARTITION OF ES_AGGREGATE_SNAPSHOT
    FOR VALUES WITH (MODULUS 8, REMAINDER 7);



CREATE TABLE IF NOT EXISTS ES_EVENT_SUBSCRIPTION (
                                                     SUBSCRIPTION_NAME    TEXT    PRIMARY KEY,
                                                     LAST_TRANSACTION_ID  XID8    NOT NULL,
                                                     LAST_EVENT_ID        BIGINT  NOT NULL
);


CREATE OR REPLACE FUNCTION CHANNEL_EVENT_NOTIFY_FCT()
    RETURNS TRIGGER AS
$BODY$
DECLARE
    aggregate_type  TEXT;
BEGIN
    SELECT a.AGGREGATE_TYPE INTO aggregate_type FROM ES_AGGREGATE a WHERE a.ID = NEW.AGGREGATE_ID;
    PERFORM pg_notify('channel_event_notify', aggregate_type);
    RETURN NEW;
END;
$BODY$
    LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER CHANNEL_EVENT_NOTIFY_TRG
    AFTER INSERT ON ES_EVENT
    FOR EACH ROW
EXECUTE PROCEDURE CHANNEL_EVENT_NOTIFY_FCT();


------------------------------ demo tables ------------------------------
CREATE TABLE IF NOT EXISTS RM_ORDER (
                                        ID              BIGINT                    PRIMARY KEY,
                                        VERSION         INTEGER                   NOT NULL,
                                        STATUS          TEXT                      NOT NULL,
                                        RIDER_ID        BIGINT                    NOT NULL,
                                        PRICE           DECIMAL(19, 2)            NOT NULL,
                                        DRIVER_ID       BIGINT,
                                        PLACED_DATE     TIMESTAMP WITH TIME ZONE  NOT NULL,
                                        ACCEPTED_DATE   TIMESTAMP WITH TIME ZONE,
                                        CANCELLED_DATE  TIMESTAMP WITH TIME ZONE,
                                        COMPLETED_DATE  TIMESTAMP WITH TIME ZONE,
                                        IS_DELETE       INTEGER                   NOT NULL
);

CREATE INDEX IF NOT EXISTS IDX_RM_ORDER_RIDER_ID ON RM_ORDER (RIDER_ID, DRIVER_ID);
CREATE INDEX IF NOT EXISTS IDX_RM_ORDER_RIDER_ID ON RM_ORDER (RIDER_ID);


CREATE TABLE IF NOT EXISTS RM_ORDER_ROUTE (
                                              ORDER_ID   BIGINT            NOT NULL,
                                              ADDRESS    TEXT,
                                              LATITUDE   DOUBLE PRECISION  NOT NULL,
                                              LONGITUDE  DOUBLE PRECISION  NOT NULL,
                                              IS_DELETE  INTEGER           NOT NULL,
                                              PRIMARY KEY (ORDER_ID, ADDRESS)
);

CREATE INDEX IF NOT EXISTS IDX_RM_ORDER_ROUTE_ORDER_ID ON RM_ORDER_ROUTE (ORDER_ID);