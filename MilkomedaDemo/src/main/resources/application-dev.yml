server:
  port: 8091
  tomcat:
    # Spring Boot 2.3: 设置服务器工作线程
    threads:
      max: 120
    # Spring Boot 2.4: Configure how long Tomcat will wait for another request before closing a keep-alive connection.
    keep-alive-timeout: 30s
    # Spring Boot 2.4: Control the maximum number of requests that can be made on a keep-alive connection before it is closed
    max-keep-alive-requests: 120

spring:
  config:
    # Spring Boot 2.4: 根据当前环境变量来激活当前配置
    activate:
      on-profile: dev
    # Spring Boot 2.4: 导入数据配置文件给当前配置
    import: "classpath:develop.properties"
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    # sundial可以使用druid数据源
    #druid:
      #url: ${mysql.url}
      #username: ${mysql.user}
      #password: ${MYSQL_PWD}
    url: ${mysql.url}
    username: ${mysql.user}
    password: ${MYSQL_PWD}
    hikari:
      pool-name: hk_dbcp
      # 等待从连接池获取连接时间（默认30s）
      connection-timeout: 60000
      maximum-pool-size: 30
      minimum-idle: 5
      # 连接在池中闲置时间，最低设置为10s，0代表不会从连接池中移除（默认为10分钟）
      idle-timeout: 120000
      # 在连接池最大存活时间，0代表无限生命时间，最低设置为30s（默认为30分钟）
      # 该设置不作用在正使用的连接，除非调用了连接关闭
      max-lifetime: 1800000
      # 连接激活的保持时间，该事件只会发生在闲置连接，到期会从池中移除，最低设置为30s，设置为1分钟内最佳
      keepalive-time: 35000

  # Spring Boot 3.0: Autoconfiguration and dependency management for Flapdoodle embedded MongoDB has been removed.
  #   If you are using embedded MongoDB for testing, use the autoconfiguration library provided by the
  #   Flapdoodle project or modify the tests to use the Testcontainers project instead of embedded MongoDB.

  # Spring Boot 3.0: The `spring.data` prefix has been reserved for `Spring Data` and any properties under the prefix
  #   imply that Spring Data is required on the classpath.
  data:
    mongodb:
      database: milkomeda
      host: localhost
      port: 27017

    # Spring Boot 3.0：Configuration Properties for Redis have moved from `spring.redis.` to `spring.data.redis.`
    #   as redis autoconfiguration requires Spring Data to be present on the classpath.
    redis:
      host: 127.0.0.1
      # Spring Boot 2.7: Support for specifying a username for authenticating to Sentinel(s)
      #sentinel:
        #username:


  # Pulsar模块异步线程池（Async异步任务线程池，Spring Boot 2.1.0+在这里配置）
  task:
    execution:
      thread-name-prefix: pulsar-
      pool:
        queue-capacity: 150
        core-size: 8
        max-size: 12
        keep-alive: 100s

    # Ice模块的调度线程池（Spring Task调度线程池，Spring Boot 2.1.0+在这里配置）
    scheduling:
      thread-name-prefix: ice-
      pool:
        size: 20
      shutdown:
        await-termination: true
        await-termination-period: 60s

  quartz:
    scheduler-name: neutron
    overwrite-existing-jobs: true
    wait-for-jobs-to-complete-on-shutdown: true

mybatis:
  type-aliases-package: com.github.yizzuide.milkomeda.demo.halo.domain
  mapper-locations:
    - classpath*:mapper/*.xml
  config-location: classpath:config/mybatis-config.xml

logging:
  level:
    com.github.yizzuide.milkomeda.demo.sundial.mapper: DEBUG
    com.github.yizzuide.milkomeda.ice.inspector.mapper: DEBUG
  # Spring Boot 2.4: The charsets used to by Logback and Log4j logging can now be configured
  charset:
    console: UTF-8
    file: UTF-8

management:
  server:
    port: 9000
  endpoint:
    shutdown:
      enabled: false
    # Spring Boot 2.4: A new startup actuator endpoint is now available that shows information about your application startup.
    startup:
      enabled: true
    # Spring Boot 3.0: this release opts for a more secure default. The keys-based approach has been removed in favor of a role-based approach,
    #   similar to the health endpoint details. Whether unsanitized values are shown or not can be configured using the properties
    #   which can have the following values:
    #     NEVER - All values are sanitized (the default).
    #     ALWAYS - All values are present in the output (any user-defined sanitizing functions will still apply).
    #     WHEN_AUTHORIZED - Values are present in the output only if a user is authorized (any user-defined sanitizing functions will apply).
    #   For JMX, users are always considered to be authorized. For HTTP, users are considered to be authorized if they are authenticated and have the specified roles.
    env:
      show-values: never
    configprops:
      show-values: never
    health:
      show-details: always
      # Spring Boot 3.1: The configured membership of a health group is now validated on startup.
      #   If a health indicator that does not exist has been included or excluded, startup will fail.
      #   This validation can be disabled, restoring the behavior of earlier versions.
      validate-group-membership: false

  endpoints:
    web:
      exposure:
        include: '*'
    # Spring Boot 3.0: Responses from the actuator endpoints shipped with Spring Boot now use an isolated ObjectMapper instance to ensure results are consistent.
    #   If you want to revert to the old behavior and use the application ObjectMapper, you can set management.endpoints.jackson.isolated-object-mapper to false.
    # If you have developed your own endpoints, you might want to ensure that responses implement the OperationResponseBody interface.
    #   This will ensure that the isolated ObjectMapper is considered when serializing the response as JSON.
    jackson:
      isolated-object-mapper: true
    # Spring Boot 3.0: By default, only the health endpoint is now exposed over JMX, to align with the default web endpoint exposure.
    jmx:
      exposure:
        include: '*'

  # Spring Boot 3.0: 'trace.http' Endpoint Renamed to 'httpexchanges'. Related infrastructure classes have also been renamed.
  #   For example, HttpTraceRepository is now named HttpExchangeRepository.
  httpexchanges:
    recording:
      include: time_taken, request-headers, response-headers

  # Spring Boot 2.4: HTTP traces no longer include cookie headers by default.
  info:
    # Spring Boot 2.6: The env info contributor is now disabled by default. It would like them to appear them in the InfoEndpoint.
    env:
      enabled: true
    # Spring Boot 2.6: Expose Java Runtime information under the java key.
    java:
      enabled: true
    # Spring Boot 2.7: An OsInfoContributor can expose some information about the Operating System the application is running on.
    os:
      enabled: on
