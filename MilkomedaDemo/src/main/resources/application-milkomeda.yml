spring:
  config:
    activate:
      on-profile: milkomeda

milkomeda:
  # 配置是否显示详细日志信息，包含debug,info（线上环境应该关闭）
  show-log: true
  # 自定义业务参数配置（可选，非框架使用）
  env:
    version: 1.0
  # 配置需要早期注册的Bean
  register-early-beans:
    - com.github.yizzuide.milkomeda.demo.universe.EarlyConfigLoader

  # 共享数据源插件配置
  data:
    redisson:
      enable: true
      use-cluster: false

  comet:
    # 读取请求body里的json数据需要开启（默认不开启）
    enable-read-request-body: true
    # 读取Response的Body时需要开启（默认不开启）
    enable-read-response-body: true
    # 请求拦截器（拦截器名是通过@Alias("xxx"))
    request-interceptors:
      # XSS注入过滤
      xss:
        enable: true
        order: 1
        include-urls: [ "/collect/usage" ]
        props:
          # Form表单字段名白名单
          whiteFieldNames: ["content", "*WithHtml"]
      # SQL注入过滤
      sql-inject:
        enable: true
        order: 2
        include-urls: [ "/collect/usage" ]
    # 响应拦截器（已实现Uniform启用时自动加载，拦截器名是通过@AliasBinder("xxx")）
    #response-interceptors:
      #uniform:
        #enable: true

    # 统一请求日志打印
    logger:
      enable: true
      # 开启打印响应数据
      enable-response: true
      # 根据路径匹配策略
      strategy:
        - paths: ["/**"]
          # 除了uri, method, params, resp常量外，$x.key需要设置自定义请求参数解析器（通过配置URLPlaceholderResolver Bean）
          # $params为对象导航，支持数组索引，如：$params.list[0].id
          tpl: url->{uri},userId:{$x.uid},token:{$header.token:0},method->{method},parameters->{params},dataId->{$params.data.id}
        - paths: ["/collect/usage"]
          type: response # 设置打印为响应类型（默认为请求类型）
          tpl: '{url:"{uri}",resp:{resp}}'
        - paths: ["/error/**"]
          tpl: url->{uri},method->{method}
    # 日志收集器
    collector:
      enable: true
      # 开启标签收集
      enable-tag: true
      tags:
        product-tag:
          include-urls: ["/collect/product/*"]
          # 异常监控：由于异常可能被 @ControllerAdvice 吞没，拦截器就获取不到异常
          exception-monitor:
            # 忽略正常的响应，业务标识字段为code
            ignore-code[code]: 1
            # 错误信息记录，业务标识字段为innerErrInfo和innerErrInfoDesc
            error-stack-msg[innerErrInfo]:
            error-stack[innerErrInfoDesc]:

  # 限制器
  particle:
    enable-filter: true
    limiters:
      # 新配置一个去重限制器（内部配置了idempotentLimiter），用来添加到BarrierLimiter组合链，防止污染限制器链
      - name: noRepeatLimiter
        key-expire: 20s
        include-urls: [ "/particle/pay" ]
        response:
          status: 200
          code: -1
          message[msg]: 请求太频繁，请稍后再试！
      - name: timesLimiter
        type: times
        props:
          timesType: MIN
          limitTimes: 3
        include-urls: [ "/particle/pay" ]
        #response-content-type: text/plain # 修改响应类型，默认为application/json
        response:
          status: 200
          #content: success # 非application/json类型的响应内容
          code: -1
          message[msg]: 请求超过次数，请稍后再试！
          addition:
            data: ${collections.emptyMap}
      # 滑动窗口限制器
      - name: rollLimiter
        type: roll_window
        # 60秒内只允许访问一次
        props:
          limitTimes: 1
        key-expire: 60s
        key-tpl: limit_sms_{$params.phone}
        include-urls: [ "/particle/sendSMS" ]
        response:
          status: 200
          code: -1
          message[msg]: 请求超过次数，请稍后再试！
      # 令牌桶限制器
      - name: tokenLimiter
        type: token_bucket
        props:
          # 桶容量为10个令牌
          capacity: 10
          # 1秒放5个令牌
          rate: 5
        key-tpl: limit_token_quota
        include-urls: [ "/particle/quota" ]
        response:
          status: 200
          code: -1
          message[msg]: 当前额度有限，请稍后再试！
      # 漏桶限制器
      - name: leakyLimiter
        type: leaky_bucket
        props:
          # 桶容量为10个请求
          capacity: 10
          # 1秒处理2个请求（速率恒定）
          rate: 2
        key-tpl: limit_leaky_pull
        include-urls: [ "/particle/pull" ]
        response:
          status: 200
          code: -1
          message[msg]: 当前拉取频繁，请稍后再试！
      - name: barrierLimiter
        type: barrier
        props:
          chain: [ "noRepeatLimiter", "timesLimiter" ]
        order: -1
        include-urls: [ "/particle/pay" ]
      - name: userBloomLimiter
        type: bloom
        props:
          # redis bitmap key
          bitKey: limit_register_user
          # 数据量
          insertions: 2000000
          # 误差率（借鉴自Guava布隆器默认误判率）
          fpp: 0.03
          # 判别值分隔符，取最后一个符号右边值（默认为`_`）
          #valueSeparator: _
        # 判别值为：$params.phone，通过valueSeparator配置
        key-tpl: limit_register_user_{$params.phone}
        include-urls: [ "/particle/exists" ]
        response:
          status: 200
          code: -1
          message[msg]: 用户不存在，请先注册
    exclude-urls: ["/favicon.ico"]

  # L1(memory) + L2(Redis)（使用 Spring Cache）
  europa:
    only-cache-l2: true
    instances:
      payPlatform:
        l2-ttl: 2h

  # 三级缓存（不使用Spring Cache）
  light:
    # 这个ThreadLocalScope是独立的功能，和下面缓存没有关联（缓存实例instances里设置无效）
    enable-light-thread-local-scope: true
    instances:
      # 缓存实例配置（没有配置的使用默认值）
      orderLight:
        # 缓存策略
        strategy: LazyExpire
        # 不需要ThreadLocal缓存
        enable-super-cache: false
        l1-expire: 1m
        l2-expire: 1m
        # 只允许一个线程调用数据获取
        data-generate-mutex: true

      #smsMoonCache:
        #only-cache-l2: true
      #abTestMoonCache:
        #only-cache-l2: true

  echo:
    # 设置请求超时
    connect-timeout: 60s

  crust:
    # -- 设置token方式 --
    stateless: true
    # token方式不缓存
    enable-cache: false
    # 默认使用对称加密Key
    use-rsa: false
    # 自定义token头，默认为token
    token-name: Authorization

    # -- 设置session方式 --
    #stateless: false
    #login-url: ${url.login}
    #root-redirect: ${url.index}

    # 不使用BCrypt（如果用户表有salt字段的情况）
    #use-bcrypt: false
    # 添加到匿名访问许可
    addition-permit-urls:
      - /actuator
      - /actuator/**
      - /s_login
      - /verifyCode/render
      - /collect/**
      - /echo/**
      - /test/**
      - /order/**
      - /particle/**
      - /pay/**
      - /user/**
      - /ice/**
      - /job/**
      - /neutron/**
      - /moon/**
      - /fusion/**
      - /halo/**
      - /hydrogen/**
      - /audit/**
      - /seckill/**
      - /sundial/**
      - /jupiter/**
      - /metal/**
      - /pillar/**
      - /orbit/**
      - /chat/**
      - /payPlatform/**
      - /riding/**

    # 放开static资源访问
    allow-static-urls:
      - /build/*
      - /error/*


  ice:
    # 在分布式布署时，需要设置实例名
    instance-name: ${spring.application.name}
    # 开启Job服务（作为消费端使用时，设置为false）
    #enable-job-timer: false
    # 是否用于分布式job服务（当服务端采用分布式时）
    #enable-job-timer-distributed: true
    # Job作业频率（默认5s）
    delay-bucket-poll-rate: 2s
    # 延迟队列分桶数量（默认为3）
    delay-bucket-count: 2
    # 消费执行超时时间（默认30s）
    ttr: 20s
    # 重试时添加延迟增长因子（默认为1，计算公式：delay * (retryCount++) * factor）
    #retry-delay-multi-factor: 2
    # 开启Task功能（使用@EnableIce时消费端需要配置为true）
    enable-task: true
    # 最大消费个数（默认为10）
    task-topic-pop-max-size: 5
    # 消费轮询间隔（默认5s）
    task-execute-rate: 2s
    # 消费处理器支持多个监听器（模拟订阅模式）
    multi-topic-listener-per-handler: true
    # TTR超载任务进入Dead queue
    enable-retain-to-dead-queue-when-ttr-overload: true
    # 开启job任务监控（如果想通过后台页面查看job状态信息）
    introspect:
      enable: true
      # 查询监测数据使用的时间排序类型（默认为update_time：每次状态修改都更新时间）
      index-type: update_time
      # 监测数据存储方案（默认为redis，只有redis方案不支持在任务结束后保存记录）
      inspector-type: mongodb

  moon:
    instances:
      - name: smsMoon
        # 默认采用lua高性能方式，不需要设置缓存名
        #cache-name: smsMoonCache
        phases: [ "七牛云短信", "阿里云短信", "容联云短信" ]
      - name: abTestMoon
        #cache-name: abTestMoonCache
        # 使用百分比分配策略
        type: percent
        # 20%的0，80%的1
        #phases: [20, 80]
        # 同上
        #phases: [2, 8]
        # 50%的0，50%的1
        phases: [ 1, 1 ]


  hydrogen:
    transaction:
      enable: true
      # 事务60秒超时回滚（支持自定义时间单位，不指定单位默认单位：s）
      rollback-when-timeout: 60s
      read-only-append-prefix:
        - fetch*

    uniform:
      enable: true
      # 强制code返回类型
      code-type: int
      # 异常message不包含具体字段名
      ignore-add-field-on-valid-fail: true
      response:
        # 5xx通用服务异常处理
        status: 200 # 这个是HTTP标准响应码，不是业务返回字段
        code: -1 # 支持改字段名：code[别名]，返回的是这个别名
        message: 服务器繁忙，请稍后再试！
        # 下面字段内部会获取异常栈信息，外面不需要添加值，列出需要的字段即可
        error-stack-msg[innerErrInfo]:
        error-stack[innerErrInfoDesc]:

        # 服务器响应超时，DeferredResult异步超时
        503:
          status: 200
          code: -1
          message: 请求响应超时！

        # 404异常处理，需要配置：
        # spring.mvc.throw-exception-if-no-handler-found=true; spring.mvc.add-mappings=false;
        404:
          status: 200
          code: -1
          message: 请求的路径错误！

        405:
          status: 200
          code: -1
          message: 请求方式不支持！

        # 参数异常处理
        400:
          status: 200
          code: -1
          # 如果需要Exception异常信息
          message:
          addition:
            data: ${collections.emptyMap}

        # 自定义异常列表处理
        customs:
          - clazz: com.github.yizzuide.milkomeda.demo.hydrogen.exception.YizException
            status: 200
            # 下面不指定值时，内部将从YizException的属性列表获取
            code:
            message:
            type:
          - clazz: com.github.yizzuide.milkomeda.hydrogen.uniform.UniformException
            status: 200
            code:
            message:

    # 参数校验
    validator:
      enable: true

    # 国际化：需配置spring.messages.basename
    i18n:
      enable: true
      # 语言设置参数名，默认为lang，如：zh_CN
      query: lang


    # 动态添加拦截器
    interceptor:
      enable: true
      interceptors:
        - clazz: com.github.yizzuide.milkomeda.demo.hydrogen.handler.UrlLogInterceptor
          order: 1
          exclude-urls:
            - /error
          props:
            open: true


    # 过滤器
    filter:
      #enable: true
      # 测试表达式计算
      # condition仅支持简单方法（内部非表达达解析）：equals, diff
      #enable: ${condition.equals(${spring.application.name}, milkomeda-demo)}
      # el用于支持SpEL复杂语句解析，但不支持获取Bean来调用方法（受限于YML解析比创建Bean实例早的问题）
      enable: ${el.parse('milkomeda-demo'.equals('${spring.application.name}'), BOOL)}
      filters:
        - name: ipLimiterFilter
          clazz: com.github.yizzuide.milkomeda.demo.hydrogen.handler.IPLimiterFilter
          url-patterns:
            - /*


  # 分布式锁
  atom:
    # 使用方案类型，支持目前的主流方案：Etcd、Redis、Zookeeper
    strategy: redis # Redis的连接使用Springboot的配置

    #strategy: etcd
    #etcd:
      #endpoint-url: http://127.0.0.1:3379
      #root-lock-node: /mk/lock

  ## 数据源配置
  sundial:
    # 使用druid数据源的配置
    #datasource-type: com.alibaba.druid.pool.DruidDataSource
    #config-prefix: spring.datasource.druid
    # 使用hikari数据源的配置
    datasource-type: com.zaxxer.hikari.HikariDataSource
    # 设置原有数据源配置前缀，作为下面instances数据源创建新的DataSource的模板
    config-prefix: spring.datasource
    instances:
      # 只读从库必需命名为以read-only为前缀，用于解决主从多数据源事务问题（特别是与分库功能一起使用时的事务管理问题）
      read-only:
        username: root
        password: ${MYSQL_PWD}
        url:  jdbc:mysql://localhost:3306/milkomeda_r?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&useSSL=false&rewriteBatchedStatements=true&allowMultiQueries=true&allowPublicKeyRetrieval=true
      db-01:
        username: root
        password: ${MYSQL_PWD}
        url:  jdbc:mysql://localhost:3306?useUnicode=true&characterEncoding=utf-8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&useSSL=false&rewriteBatchedStatements=true&allowMultiQueries=true&allowPublicKeyRetrieval=true
      pg:
        driver-class-name: org.postgresql.Driver
        username: postgres
        password: ${MYSQL_PWD}
        url: jdbc:postgresql://localhost:5432/postgres?currentSchema=milkomeda&useUnicode=true&characterEncoding=UTF-8&TimeZone=Asia/Shanghai
    # 主从切面策略（内部通过桥接Orbit模块功能实现）
    strategy:
      - key-name: read-only # 这里用上面instances里配置的key
        pointcut-expression: execution(* com.github.yizzuide.milkomeda.demo..mapper.*.query*(..))

    # 开启分库分表
    enable-sharding: true
    sharding:
      # 忽略索引0后缀，兼容之前的无索引库名、表名
      original-name-as-index-zero: true
      # 分库、分库分表需要的节点配置（仅分表不需要配置）
      nodes:
        # 一个主、从配置为一个节点(节点索引以0开始)，节点索引与路由key相关（从库可选配置）
        node_0:
          # spring.datasource配置的默认会生成master数据源实例
          leader: master
          follows: ["read-only"]
        node_1:
          # 如果数据源实例没有指定数据库，使用schema指定
          schema: milkomeda_01
          leader:  db-01
          #follows: ["xxx"]

  # 规则引擎
  jupiter:
    # 匹配表达里的结果对象下划线转驼峰
    match-camel-case: true
    rules:
      # 规则名随意取，但不能重复
      payRule:
        rule-items:
          # 规则项名随意取，让规则项知其名明其意
          global:
            # 结果匹配表达式
            match: true
          # 下面的规则是新客才能下单成功
          new-user-pay-rule:
            # 查询领域（表名）
            domain: t_order
            # 包含字段
            fields: id
            # 查询过滤，支持$params（Request Parameter域）、$attr（Request Attribute域）、$header（Request Header域）、$cookie（Request Cookie域）
            # 关系逻辑使用符：&&、||
            filter: user_id={$attr.userInfo.uid}
            # 结果匹配表达式，默认使用EL表达式，EL和OGNL都支持使用`#root`来访问根对象，如：#root != null
            #match: size() == 0
            match: size == 0
            syntax: ognl

  # 分布式应用名配置（默认取当前应用名）
  metal:
    application-name: demo

  # 环绕切面
  orbit:
    instances:
      - key-name: pre-log
        advice-clazz: com.github.yizzuide.milkomeda.demo.orbit.PreLogAdvice
        # 设置切点表达式（默认advisor-clazz为AspectJ类型）
        pointcut-expression: execution(* com..orbit.*API.fetch*(..))
      - key-name: pay-log
        advice-clazz: com.github.yizzuide.milkomeda.demo.orbit.RecordAdvice
        # 该策略为方法注解方式（基于Spring Ioc和Aop底层API实现）
        advisor-clazz: com.github.yizzuide.milkomeda.orbit.AnnotationOrbitAdvisor
        advisor-props:
          methodAnnotationType: com.github.yizzuide.milkomeda.demo.orbit.RecordLog

  # 高并发任务队列
  quark:
    topic-chains:
      test: h1 -> h2